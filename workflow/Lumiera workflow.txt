Lumiera Workflows

Requirements & Considerations
 -Technical
 -User

Current Industry Workflows**

Potential Lumiera Workflows**

**Not done


 1.Requirements & Considerations
(a)Ingest
It seemed easiest to me to just go through chronologically
 i.Technical
 A.All ingest sources need a solid metadata structure, suggestions welcome:
Media Type attributes (codec, frame mode/rate, aspect, color science/LUT)
Clip Attributes (name, length, I/O, media I/O, bitrate, size
Acquisition Attributes (Modified EXIF data, ie: format, frame mode/rate, aspect, resolution, ISO, f-stop, shutter speed focal length, color format, camera,)
UID & Project/Sequence & Subclip & Render Reference
Production Info (scene #, shot #, angle #, take rating, night/day, production name, DP, Camera Op, Director, set/location, date shot, actors/characters)
 B.Tape/Video Ingest
Connect to capture system through back-end/modules/plug-in
Deck-control needs to handle both Firewire (1394) and Serial (RS232, RS422, Sony, Panasonic, JVC) could be internal controller, but at least a timecode hand-off to a plug-in. Needs to be able to control decks in single frame increments with precise TC.
 C.Data Ingest
Extract/Write metadata to file module needed. Should parse files to make sure they're not corrupted
 ii.User
 A.Should we look into set metadata collection systems to see if modules to sync and copy that data to the clip is viable?
 B.The GUI Ingest element should be logical and convenient to use, and in my opinion should handle both tape-based logging-capturing and data ingest.
(b)Edit
 i.Technical
 A.Video & Audio playback
#1-Coding should handle at least 4k, 32-bit, 200+MB/s, selectable LUTs (?)
Real-time of native codecs is important.
Coding should handle in-sync minimum 8 audio tracks, 96kHz/24bit
(2) Main media playback windows, clip selector & timeline output both should meet #1
Live scope simulators, vector and waveform a must, 3d/wheel good choice
Live playback TC readouts from playheads
Compatibility for low-latency hardware output to video & audio devices, w/timecode, likely a hand-off but would latency is important.
Integration to JACK, ALSA, or OSS would be ideal.
Real-time (OpenGL?) rendering of simple filters
Back-ground CPU rendering
 B.File Handling
Other apps (FCP) are unable to or inconsistently work with updated media files mid-session, this is a back-end design concern.
 C.Project/Sequence Requirements
Project 'bins', user-created bins, media filtering (ex: all video or everything in scene #1)
Thumbnail & list views
Drag & Drop of clips between bins, playback windows & timelines.
File and directory import
 D.Timeline
All the normal essentials
Render indicators (needs render, RT) on clips and/or timeline
Should be adjustable (frame mode/rate, would require script to translate old TC numbers to new timebase)
I recommend that the timeline video format setting be the “box” and clips “fill in” the box. FCP for example does weird things to the clips when you change the resolution/aspect of the sequence. Further it would make sense to have options in the sequence for how to handle non-native resolutions and aspect ratios (stretch, scale w/boxes, leave alone)
We have Track Nesting, but we need to have some way to gang sync/lock video with its audio track so both are cut and move simultaneously.
Currently, NLEs all use vertical, additive layering. We should work on including the ability to “flowchart” tracks (AE's pick-whip) like a compositor would, and change the “blend” modes.
Draw-on automation/keyframes & editing for both video & audio tracks.
 B.Misc
We need to have accessible, easily scriptable FX/Filter menus for clips, all NLEs throw a tab into the clip selector pain.
Whole app should be multi-core aware, especially any rendering engines.
Needs to work on multiple monitors
 ii.User
 A.The 6 things an editor thinks about at work:
The clips in the bin
Timeline
Timeline output
The edit tools
Transitions
Filters/FX
 B.Features that make life better
Edit review/edit on the fly (Avid)
Quick Transitions (1-2 key/click transitions)
Match-frame
Media Search
(b)Export/Finishing
 i.Technical
 A.EDL export
Should export all major EDL formats
 B.XML 
We should look into something along the lines of the Apple XML, so that the project could be passed to XML compliant programs
 C.Media Export
Need to build a module that will render project and possibly re-encode it as well, but that could be a hand-off
 D.Tape Export
Essentially the reverse of the Ingest issue, must pass frame accurate deck control and fully synced audio/video.
 E.Finishing
I'm not sure if they plan to integrate color grading/finishing into Lumiera at some point but if not we need to look into compatibility for those applications.
 ii.User
 A.EDL/XML Export
We need to leave the workflow that passes on lists in standardized forms. These also need to be easy enough to use without some application console script.
 B.Media Export
Whether handled internally or externally we need to build an interface to make this seamless and intuitive, my favorite exporter is Premiere's which will render the output with any given setting.
 C.Tape Export
Should be able to handle both straight lay-off and “edit-to-tape”.
 2.Types of Workflows
(a)Film
 i.Captured Film-TK-Sound Sync
 ii.Ingest-NLE-
 iii.(3) Possible output formats
 A.EDL-Optical Print+Neg Cutting
 B.DI (Either new or oringinal TK)-Film
 C.DI (Either new or oringinal TK)-Video/Media
